

resource "aws_instance" "ec2-cdm_REPLACEIDX" {
  ami           = "REPLACEAMI"
  instance_type = "t3.large"
  tags = {
    Name        = "CDM_ES4_REPLACEUID"
    Environment = "REPLACEENV"
  }

  user_data = <<-EOF
Content-Type: text/x-shellscript; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit

#!/bin/bash
idx=0
while [ "$( docker container inspect -f '{{.State.Health.Status}}' kib )" != "healthy" ]; do
  sleep 2;
  if (( idx > 600 )); then # 20 minutes.
    exit 1
  fi
  (( idx++ ))
done

if [ "$( docker container inspect -f '{{.State.Status}}' kib )" == "running" ]; then

  sed -i 's/\"@@@PARSEDURL@@@\", args.kibana/\"@@@PARSEDURL@@@\", \"https:\/\/REPLACEURL\/web\/REPLACEUID\"/' /var/lib/docker/overlay2/74b27f078db16b06e14bafc2b997408122c4ed6273c6a585ad3fe30a3b38f952/diff/apps/cdm/deploy.py
  sed -i 's/\"endpoint\", args.kibana/\"endpoint\", \"https:\/\/REPLACEURL\/web\/REPLACEUID\"/' /var/lib/docker/overlay2/74b27f078db16b06e14bafc2b997408122c4ed6273c6a585ad3fe30a3b38f952/diff/apps/cdm/deploy.py

  sed -i 's/\"180d\"/\"1000d\"/' /var/lib/docker/overlay2/74b27f078db16b06e14bafc2b997408122c4ed6273c6a585ad3fe30a3b38f952/diff/apps/cdm/ilms/cdm_delete_after_180_days.json
  sed -i 's/\"timepicker:timeDefaults\": \"{\\n  \\"from\\": \\"now-30d\\",\\n  \\"to\\": \\"now\\"\\n}\"}/"timepicker:timeDefaults\": \"{\\n  \\"from\\": \\"now-1y\\",\\n  \\"to\\": \\"now\\"\\n}\"}/' /var/lib/docker/overlay2/74b27f078db16b06e14bafc2b997408122c4ed6273c6a585ad3fe30a3b38f952/diff/apps/cdm/objects/cdm.ndjson

  cd /usr/local/share/cdm-dashboard/cdm-compose
  sudo -H -u ec2-user bash -c '/usr/local/bin/docker-compose -f cdm-docker-tls.yml down'
  sudo -H -u ec2-user bash -c '/usr/local/bin/docker-compose -f cdm-docker-installer-tls.yml up -d' # this takes 30 seconds
  sleep 61 # to allow time for the dashboard installer to complete
  sudo -H -u ec2-user bash -c '/usr/local/bin/docker-compose -f cdm-docker-installer-tls.yml down'
  sudo -H -u ec2-user bash -c '/usr/local/bin/docker-compose -f cdm-docker-tls.yml up -d' # this takes 30 seconds

  sleep 31 # to allow time for kibana and ES to startup

  docker exec es bash -c "echo \ >> ./config/jvm.options"
  docker exec es bash -c "echo '-Dlog4j2.formatMsgNoLookups=true' >> ./config/jvm.options"
  sudo -H -u ec2-user bash -c 'docker restart es' # this takes 30 seconds

  docker exec kib bash -c "echo \ >> ./config/kibana.yml"
  docker exec kib bash -c "echo 'server.publicBaseUrl: https://REPLACEURL/web/REPLACEUID' >> ./config/kibana.yml"
  docker exec kib bash -c "echo 'server.basePath: /web/REPLACEUID' >> ./config/kibana.yml"
  docker exec kib bash -c "echo 'server.rewriteBasePath: true' >> ./config/kibana.yml"
  sudo -H -u ec2-user bash -c 'docker restart kib' # this takes 30 seconds
fi
 EOF

  network_interface {
    network_interface_id = aws_network_interface.ec2-cdm-ni_REPLACEIDX.id
    device_index         = 0
  }
}

resource "aws_network_interface" "ec2-cdm-ni_REPLACEIDX" {
  security_groups = [aws_security_group.range-cdm-sg.id]
  subnet_id = data.aws_subnet.vpc_range_subnet1.id
  private_ips = ["REPLACEIP"]
  tags = {
     Name        = "CDM_ES4_NI_REPLACEUID"
     Environment = "REPLACEENV"
  }
}
